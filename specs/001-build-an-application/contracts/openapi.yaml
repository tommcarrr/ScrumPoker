openapi: 3.1.0
info:
  title: Scrum Poker API
  version: 0.1.0
  description: >-
    API for managing Scrum Poker estimation sessions. Draft status. Subject to change prior to first stable release (1.0.0).
servers:
  - url: http://localhost:5000
    description: Local development (Kestrel)
  - url: https://{env}-api.example.com
    description: Environment deployment
    variables:
      env:
        default: dev
        enum: [dev,qa,staging,prod]

tags:
  - name: Sessions
  - name: Participants
  - name: WorkItems
  - name: Estimates

components:
  schemas:
    SessionCode:
      type: string
      pattern: '^[A-Z0-9]{6}$'
      description: Uppercase session code generated by server.
    DeckValue:
      type: string
      enum: ["0","1/2","1","2","3","5","8","13","20","40","100","?","â˜•"]
    SessionState:
      type: string
      enum: [Pending,Estimating,Revealed,Finalized]
    Session:
      type: object
      required: [code, createdUtc, deck, state]
      properties:
        code:
          $ref: '#/components/schemas/SessionCode'
        createdUtc:
          type: string
          format: date-time
        deck:
          type: array
          items:
            $ref: '#/components/schemas/DeckValue'
        state:
          $ref: '#/components/schemas/SessionState'
        activeWorkItemId:
          type:
            - string
            - 'null'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        workItems:
          type: array
          items:
            $ref: '#/components/schemas/WorkItem'
    Participant:
      type: object
      required: [id, displayName, joinedUtc]
      properties:
        id:
          type: string
          format: uuid
        displayName:
          type: string
          minLength: 1
          maxLength: 40
        joinedUtc:
          type: string
          format: date-time
        isFacilitator:
          type: boolean
          default: false
    WorkItem:
      type: object
      required: [id, title, createdUtc, status]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 140
        description:
          type: string
          maxLength: 2000
        createdUtc:
          type: string
          format: date-time
        status:
          type: string
          enum: [Pending,Estimating,Revealed,Finalized]
        finalEstimate:
          $ref: '#/components/schemas/DeckValue'
        estimates:
          type: array
          items:
            $ref: '#/components/schemas/Estimate'
    Estimate:
      type: object
      required: [participantId, value]
      properties:
        participantId:
          type: string
          format: uuid
        value:
          $ref: '#/components/schemas/DeckValue'
        submittedUtc:
          type: string
          format: date-time
    ProblemDetails:
      type: object
      description: RFC 7807 error response
      properties:
        type: { type: string }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

paths:
  /api/sessions:
    post:
      summary: Create a new session
      tags: [Sessions]
      operationId: createSession
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                facilitatorDisplayName:
                  type: string
                  minLength: 1
                  maxLength: 40
      responses:
        '201':
          description: Session created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400': { $ref: '#/components/responses/ValidationError' }
  /api/sessions/{code}:
    get:
      summary: Get session snapshot
      tags: [Sessions]
      operationId: getSession
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
      responses:
        '200':
          description: Session returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
  /api/sessions/{code}/participants:
    post:
      summary: Join session
      tags: [Participants]
      operationId: joinSession
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [displayName]
              properties:
                displayName:
                  type: string
                  minLength: 1
                  maxLength: 40
      responses:
        '200':
          description: Participant joined; returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/ValidationError' }
  /api/sessions/{code}/work-items:
    post:
      summary: Add work item
      tags: [WorkItems]
      operationId: addWorkItem
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 140
                description:
                  type: string
                  maxLength: 2000
      responses:
        '200':
          description: Work item added; returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/ValidationError' }
  /api/sessions/{code}/work-items/{workItemId}/estimates:
    post:
      summary: Submit or update an estimate for active item
      tags: [Estimates]
      operationId: submitEstimate
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
        - in: path
          name: workItemId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [participantId,value]
              properties:
                participantId:
                  type: string
                  format: uuid
                value:
                  $ref: '#/components/schemas/DeckValue'
      responses:
        '200':
          description: Estimate accepted; returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/ValidationError' }
  /api/sessions/{code}/work-items/{workItemId}/reveal:
    post:
      summary: Reveal estimates for item
      tags: [WorkItems]
      operationId: revealEstimates
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
        - in: path
          name: workItemId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Estimates revealed; returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
  /api/sessions/{code}/work-items/{workItemId}/finalize:
    post:
      summary: Finalize estimate for item
      tags: [WorkItems]
      operationId: finalizeEstimate
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
        - in: path
          name: workItemId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                value:
                  $ref: '#/components/schemas/DeckValue'
      responses:
        '200':
          description: Work item finalized; returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/ValidationError' }
  /api/sessions/{code}/restart:
    post:
      summary: Restart session (clears non-finalized progress)
      tags: [Sessions]
      operationId: restartSession
      parameters:
        - in: path
          name: code
          required: true
          schema:
            $ref: '#/components/schemas/SessionCode'
      responses:
        '200':
          description: Session restarted; returns updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
